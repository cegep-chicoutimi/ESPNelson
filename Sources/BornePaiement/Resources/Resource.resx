<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Amount" xml:space="preserve">
    <value>Montant</value>
  </data>
  <data name="ArrivalTime" xml:space="preserve">
    <value>Temps d'arrivée</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Annuler</value>
  </data>
  <data name="ConfirmAndPay" xml:space="preserve">
    <value>Confirmer et payer</value>
  </data>
  <data name="Duration" xml:space="preserve">
    <value>Durée</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Courriel</value>
  </data>
  <data name="EnterEmailAndSelectSubscription" xml:space="preserve">
    <value>Veuillez entrer votre email et sélectionner un type d'abonnement.</value>
  </data>
  <data name="EnterYourPIN" xml:space="preserve">
    <value>Entrez votre NIP</value>
  </data>
  <data name="ErrorTitle" xml:space="preserve">
    <value>Erreur</value>
  </data>
  <data name="Fare" xml:space="preserve">
    <value>Tarif</value>
  </data>
  <data name="GenerateReceipt" xml:space="preserve">
    <value>Générer le reçu</value>
  </data>
  <data name="GenerateSubscriptionTicket" xml:space="preserve">
    <value>Générer un ticket d'abonnement</value>
  </data>
  <data name="IncorrectPIN" xml:space="preserve">
    <value>❌ NIP incorrect. Veuillez réessayer.</value>
  </data>
  <data name="InvalidEmailFormat" xml:space="preserve">
    <value>Veuillez entrer une adresse avec un format valide.</value>
  </data>
  <data name="InvalidOrNotFoundTicket" xml:space="preserve">
    <value>❌ Ticket invalide ou introuvable.</value>
  </data>
  <data name="InvalidTicket" xml:space="preserve">
    <value>Ticket invalid</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Langue</value>
  </data>
  <data name="NoPaymentInfo" xml:space="preserve">
    <value>Aucune information de paiement disponible pour générer le reçu.</value>
  </data>
  <data name="ParkingTimeExceeded" xml:space="preserve">
    <value>⛔ Durée de stationnement dépassée ! Contactez l'administration.</value>
  </data>
  <data name="PayementStation" xml:space="preserve">
    <value>BORNE DE PAIEMENT</value>
  </data>
  <data name="PaymentError" xml:space="preserve">
    <value>❌ Erreur lors du paiement : {0}</value>
  </data>
  <data name="PaymentSuccess" xml:space="preserve">
    <value>"✅ Paiement effectué !\nMontant : {0:C}\nTaxes : {1:C}\nDurée : {2}h"</value>
  </data>
  <data name="ReceiptGenerated" xml:space="preserve">
    <value>Reçu généré avec succès !</value>
  </data>
  <data name="ScanningInstructions" xml:space="preserve">
    <value>Veuillez scanner votre ticket de parking</value>
  </data>
  <data name="ScanTicketFirst" xml:space="preserve">
    <value>Veuillez d'abord scanner un ticket.</value>
  </data>
  <data name="SimulatePayment" xml:space="preserve">
    <value>Simuler le paiement</value>
  </data>
  <data name="Subscribe" xml:space="preserve">
    <value>S'abonner</value>
  </data>
  <data name="Subscription" xml:space="preserve">
    <value>Souscription à un abonnement</value>
  </data>
  <data name="SubscriptionError" xml:space="preserve">
    <value>Erreur lors de la souscription : {0}</value>
  </data>
  <data name="SubscriptionSuccess" xml:space="preserve">
    <value>Abonnement souscrit avec succès !\nType : {0}\nDate de début : {1:dd/MM/yyyy}\nDate de fin : {2:dd/MM/yyyy}\nMontant : {3:C}</value>
  </data>
  <data name="SubscriptionTicketGenerated" xml:space="preserve">
    <value>Ticket d'abonnement généré avec succès !</value>
  </data>
  <data name="SubscriptionTicketGenerated1" xml:space="preserve">
    <value>Ticket d'abonnement généré avec succès !</value>
  </data>
  <data name="SubscriptionType" xml:space="preserve">
    <value>Type d'abonnement</value>
  </data>
  <data name="SuccessTitle" xml:space="preserve">
    <value>Succès</value>
  </data>
  <data name="TicketAlreadyConverted" xml:space="preserve">
    <value>Ce ticket a déjà été converti en abonnement.</value>
  </data>
  <data name="TicketAlreadyPaid" xml:space="preserve">
    <value>Ce ticket a déjà été payé.</value>
  </data>
  <data name="ValidTicket" xml:space="preserve">
    <value>Ticket valid</value>
  </data>
</root>